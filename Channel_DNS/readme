===========================================================================
        Algorithm: Advection-based Multiframe Iterative Correction (AMIC)
           Author: CHEN Junwei, Stefano DISCETTI, Marco RAIOLA
       Laboratory: EAP of UC3M
         Platform: MATLAB & PYTHON
             Date: 20th January 2025
          Version: 2.2.0
     Repositories: https://github.com/woiiiiow/AMIC
          Contact: junwei.chen@uc3m.es
===========================================================================

DESCRIPTION
The Advection-based Multiframe Iterative Correction (AMIC) is a space-time filter based on advection funtion to filter the (Particle Image Velocimetry) PIV fields. Here is an example on 3D synthetic dataset of channel flow at $Re_\tau = 1000$ from JHTDB (John Hopkins Turbulence Database).

PLATFORM
The codes are tested on:
AMD Ryzen 9 5950X/128 GB DDR4/NVIDIA GeForce RTX 4090
Debian 12/MATLAB R2023b
It takes 150 s over 8 loops for AMIC, and 600 s for pressure computation over 100 frames

SITE OF CODES
https://github.com/woiiiiow/AMIC

DATABASE
https://zenodo.org/records/14752830

the original database is 
https://turbulence.idies.jhu.edu/home

RUNNING
convert format from h5 to mat using h52mat.m
change the file path to suit your environment and run

FILES IN GITHUB
airfoilLES_README.pdf                           copy of the readme of original database
video_channel.mp4                               a sample video
gaussian_white_noise/                           folder of the code with Gaussian white noise
convolution_gaussian_white_noise/               folder of the code with convolution of Gaussian white noise
in each folder there is:
    AMICFilter.m                                MATLAB script to process the velocity field using AMIC
    Noisify.m                                   MATLAB script to superpose noise into velocity field
    PODFilter.m                                 MATLAB script to perform POD (Proper Orthogonal Decomposition) truncation on velocity field
    P_calculation.m                             MATLAB script to compute the pressure field
    SGFilter.m                                  MATLAB script to filter the velocity field with Savitzky-Golay filter
    filter_ae.py                                PYTHON code to perform blind denoise autoencoder
    log              	                        a file logging the outputs of program
    showpressure.m                              MATLAB script to check the pressure computation result
    showvelocity.m                              MATLAB script to check the velocity processing result

FILES IN ZENODO
mat2h5.m                                        MATLAB script to convert the format from *.mat to *.h5
h52mat.m                                        MATLAB script to convert the format from *.h5 to *.mat
Fields_testing/                                 time resolved flow fields
Fields/                                         non time resolved flow fields to enrich POD spectrum (only for POD truncation)
GWN/                                            folder of the data with Gaussian white noise
CGWN/                                           folder of the data with convolution of Gaussian white noise
in each folder of {GWN, CGWN} there is:
    Pressure.mat                                saving pressure computation result
    V_NOISE.mat                                 saving velocity field superimposed with noise
    V_SG.mat                                    saving velocity field after Savitzky-Golay filter
    V_POD.mat                                   saving velocity field after POD truncation
    V_AE.mat                                    saving velocity field after blind denoise autoencoder
    V_AMIC.mat                                  saving velocity field after AMIC

STRUCTURE OF DATA FILES
of field data in Fields_testing/ and Fields/:
    Xst, Yst, Zst: scalar      ; the location of the field of view
    t            : scalar      ; time of frame
    xb, yb       : 1x88        ; baseline in x/y direction
    zb           : 1x44        ; baseline in z   direction
    u, v, w, p   : 88x88x44    ; velocity field components in x/y/z direction and pressure field (dimension sequence is XYZ)
of Pressure.mat:
    P_pod        : 92928x100  ; pressure field from POD truncation
    P_sg         : 92928x100  ; pressure field from Savitzky-Golay filter
    P_ref        : 92928x100  ; reference pressure field
    P_noise      : 92928x100  ; pressure field from noisy field
    P_amic       : 92928x100  ; pressure field from AMIC
of V_NOISE.mat:
    Enabled      : 92928x501  ; enabled velocity vectors
    PhiU         : 278784x2400; POD spatial modes
    SigmaU       : 2400x2400  ; POD singular value matrix
    U_array      : 92928x501  ; velcity field in X-direction (Enabled part)
    V_array      : 92928x501  ; velcity field in Y-direction (Enabled part)
    W_array      : 92928x501  ; velcity field in Z-direction (Enabled part)
    U_noise      : 92928x501  ; velcity field in X-direction (noisy)
    V_noise      : 92928x501  ; velcity field in Y-direction (noisy)
    W_noise      : 92928x501  ; velcity field in Z-direction (noisy)
    U_ext        : 92928x1899 ; velcity field in X-direction (for POD)
    V_ext        : 92928x1899 ; velcity field in Y-direction (for POD)
    W_ext        : 92928x1899 ; velcity field in Z-direction (for POD)
    Um           : 92928x1    ; mean velcity field in X-direction
    Vm           : 92928x1    ; mean velcity field in Y-direction
    Wm           : 92928x1    ; mean velcity field in Z-direction
of V_SG.mat/V_POD.mat/V_AE.mat/V_AMIC.mat:
    U, V, W      : 92928x120  ; processed velcity field in X/Y/Z-direction
    xb, yb       : 1x88       ; baseline in x/y direction
    zb           : 1x44       ; baseline in z   direction

ACKNOWLEDGEMENT
We warmly acknowledge John Hopkins Turbulent Database, and wish the user of data on Zenodo cite their articles.
